<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List App with Reminders</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #ffeb3b;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            background: #fff;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 400px;
            border-radius: 8px;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .input-group {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        input[type="text"],
        input[type="date"],
        select {
            width: calc(100% / 3 - 10px);
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 5px;
        }

        button {
            padding: 10px;
            border: none;
            background-color: #28a745;
            color: white;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #218838;
        }

        ul {
            list-style: none;
            padding: 0;
        }

        li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: #fafafa;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        li .edit-mode {
            display: flex;
        }

        li input[type="text"] {
            margin-right: 10px;
        }

        li button {
            margin-left: 10px;
        }

        .btn-edit {
            background-color: #ffc107;
        }

        .btn-edit:hover {
            background-color: #e0a800;
        }

        .btn-delete {
            background-color: #dc3545;
        }

        .btn-delete:hover {
            background-color: #c82333;
        }

        .btn-save {
            background-color: #007bff;
        }

        .btn-save:hover {
            background-color: #0069d9;
        }

        .important-priority {
            background-color: #ffcccc;
        }

        .medium-priority {
            background-color: #fff2cc;
        }

        .low-priority {
            background-color: #ccffcc;
        }

        .reminder {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>To-Do List</h1>
        <div class="input-group">
            <input type="text" id="taskInput" placeholder="Add a new task...">
            <input type="date" id="taskDate">
            <select id="taskPriority">
                <option value="important">Important</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
            </select>
            <button id="addTaskBtn">Add</button>
        </div>
        <ul id="taskList"></ul>
        <div id="reminderContainer"></div>
    </div>

    <script>
        const taskInput = document.getElementById('taskInput');
        const taskDate = document.getElementById('taskDate');
        const taskPriority = document.getElementById('taskPriority');
        const addTaskBtn = document.getElementById('addTaskBtn');
        const taskList = document.getElementById('taskList');
        const reminderContainer = document.getElementById('reminderContainer');

        addTaskBtn.addEventListener('click', addTask);

        function addTask() {
            if (taskInput.value.trim() === '') {
                alert('Please enter a task');
                return;
            }

            const li = document.createElement('li');
            li.classList.add(getPriorityClass(taskPriority.value));
            li.innerHTML = `
                <span>${taskInput.value} (Due: ${taskDate.value})</span>
                <div class="buttons">
                    <button class="btn-edit">Edit</button>
                    <button class="btn-delete">Delete</button>
                </div>
            `;

            taskList.appendChild(li);
            taskInput.value = '';
            taskDate.value = '';
            taskPriority.value = 'medium';

            const editBtn = li.querySelector('.btn-edit');
            const deleteBtn = li.querySelector('.btn-delete');
            editBtn.addEventListener('click', () => editTask(li));
            deleteBtn.addEventListener('click', () => deleteTask(li));

            checkReminders();
        }

        function getPriorityClass(priority) {
            if (priority === 'important') return 'important-priority';
            if (priority === 'medium') return 'medium-priority';
            return 'low-priority';
        }

        function editTask(taskItem) {
            const span = taskItem.querySelector('span');
            const currentText = span.textContent.split(' (Due: ')[0];
            const currentDate = span.textContent.split(' (Due: ')[1].replace(')', '');
            taskItem.innerHTML = `
                <div class="edit-mode">
                    <input type="text" value="${currentText}">
                    <input type="date" value="${currentDate}">
                    <select>
                        <option value="important" ${taskItem.classList.contains('important-priority') ? 'selected' : ''}>Important</option>
                        <option value="medium" ${taskItem.classList.contains('medium-priority') ? 'selected' : ''}>Medium</option>
                        <option value="low" ${taskItem.classList.contains('low-priority') ? 'selected' : ''}>Low</option>
                    </select>
                    <button class="btn-save">Save</button>
                    <button class="btn-delete">Delete</button>
                </div>
            `;

            const saveBtn = taskItem.querySelector('.btn-save');
            const deleteBtn = taskItem.querySelector('.btn-delete');
            saveBtn.addEventListener('click', () => saveTask(taskItem));
            deleteBtn.addEventListener('click', () => deleteTask(taskItem));
        }

        function saveTask(taskItem) {
            const input = taskItem.querySelector('input[type="text"]');
            const dateInput = taskItem.querySelector('input[type="date"]');
            const select = taskItem.querySelector('select');
            const newText = input.value.trim();
            const newDate = dateInput.value;

            if (newText === '') {
                alert('Task cannot be empty');
                return;
            }

            taskItem.className = '';
            taskItem.classList.add(getPriorityClass(select.value));

            taskItem.innerHTML = `
                <span>${newText} (Due: ${newDate})</span>
                <div class="buttons">
                    <button class="btn-edit">Edit</button>
                    <button class="btn-delete">Delete</button>
                </div>
            `;

            const editBtn = taskItem.querySelector('.btn-edit');
            const deleteBtn = taskItem.querySelector('.btn-delete');
            editBtn.addEventListener('click', () => editTask(taskItem));
            deleteBtn.addEventListener('click', () => deleteTask(taskItem));

            checkReminders();
        }

        function deleteTask(taskItem) {
            taskList.removeChild(taskItem);
            checkReminders();
        }

        function checkReminders() {
            reminderContainer.innerHTML = '';
            const tasks = taskList.querySelectorAll('li');
            tasks.forEach(task => {
                const taskDate = task.querySelector('span').textContent.split(' (Due: ')[1].replace(')', '');
                const currentDate = new Date().toISOString().split('T')[0];
                if (taskDate === currentDate) {
                    const reminder = document.createElement('div');
                    reminder.className = 'reminder';
                    reminder.textContent = `Reminder: Task "${task.querySelector('span').textContent.split(' (Due: ')[0]}" is due today!`;
                    reminderContainer.appendChild(reminder);
                }
            });
        }

        // Check reminders every minute
        setInterval(checkReminders, 60000);

        // Initial check when the page loads
        document.addEventListener('DOMContentLoaded', checkReminders);
    </script>
</body>
</html>
